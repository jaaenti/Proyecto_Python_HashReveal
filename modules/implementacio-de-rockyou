import hashlib
from argon2 import PasswordHasher, exceptions

ROCKYOU_PATH = "carpeta/rockyou.txt"


TRUSTED_LENGTHS = {
    32: ["MD5"],
    40: ["SHA-1"],
    64: ["SHA-256"],
    128: ["SHA-512"],
}

def load_rockyou_dictionary():
    try:
        with open(ROCKYOU_PATH, "r", encoding="latin-1") as file:
            return [line.strip() for line in file]
    except FileNotFoundError:
        print(f"Error: El archivo {ROCKYOU_PATH} no se encontró. Asegúrate de que esté en el directorio correcto.")
        return []

def detect_hash_type(hash_value):
    if "$argon2" in hash_value:
        return ["Argon2"]

    hash_length = len(hash_value)
    return TRUSTED_LENGTHS.get(hash_length,[])

def try_decrypt_hash(hash_value, possible_hash_types, dictionary):
    for hash_type in possible_hash_types:
        if hash_type == "Argon2":
            ph = PasswordHasher()
            for password in dictionary:
                try:
                    ph.verify(hash_value, password)
                    return f"Password found: {password} (Hash type: {hash_type})"
                except exceptions.VerifyMismatchError:
                    continue
                except exceptions.Argon2Error as e:
                    return f"Error processing Argon2 hash: {e}"
        else:
            for password in dictionary:
                hashed_password = hashlib.new(hash_type.lower(), password.encode()).hexdigest()
                if hashed_password == hash_value:
                    return f"Password found: {password} (Hash type: {hash_type})"
    return "Password not found in the dictionary."

def main():
    dictionary = load_rockyou_dictionary()
    if not dictionary:
        print("El diccionario no pudo ser cargado. Saliendo del programa.")
        return

    while True:
        print("\n--- Hash Decryptor ---")
        hash_value = input("Enter the hash to decrypt: ").strip()
        if not hash_value:
            print("Error: No hash provided. Try again.")
            continue

        possible_hash_types = detect_hash_type(hash_value)

        if not possible_hash_types:
            print("Could not determine hash type based on length. Ensure the hash is valid.")
            continue

        result = try_decrypt_hash(hash_value, possible_hash_types, dictionary)
        print(f"\nResult: {result}\n")

        retry = input("Do you want to try another hash? (y/n): ").strip().lower()
        if retry != 'y':
            print("Exiting the hash decryptor.")
            break

if __name__ == "__main__":
    main()
